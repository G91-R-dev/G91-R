#// Radio ptr175
#//
#// Adriano Bassignana - Bergamo (Italy) 2021
#//
#// Advanced configuration ptr175 radio
#// Documentation: https://en.wikipedia.org/wiki/Airband
#//
#// The airband, for this type radio is 5KHz interval (for compatibility with actual system), but the apparatus
#// permit only 10 KHz channels step

var prop = props.globals.initNode("fdm/jsbsim/systems/gauges/radio/ptr175/knob-function-desc", "OFF", "STRING");

var delta_time_standard = 1;
var delta_time = delta_time_standard;
var delta_time_delay = 0;
var testing_log_active = 0;
var start_status = 0;

var comm_function_set = 0;
var knob_function_desc = "OFF";
var chan_selector = nil;
var chan_old = nil;

var radio_status = "";
var prec_frequencies_selected_mhz = nil;

var com2_old_freq_value = nil;

var comm_freq_select_mhz_old = nil;
var comm_freq_select_mhz = 0.0;
var comm_freq_select_mhz_change = 0;


var radio_normal_freq = func(freq) {
    
    if (freq != nil) {
        if (freq >= 117.5 and freq <= 135.95) {
            var s05 = num(sprintf("%3.2f",math.round(freq * 100.0, 1) / 100.0));
            return s05;
        } else if (freq >= 225.0 and freq <= 399.9) {
            var s10 = num(sprintf("%3.2f",math.round(freq * 100.0, 1) / 100.0));
            return s10;
        };
    };
    return 0.0;
    
};


var radio_set_chan_freq = func(chan, freq) {
    
    freq = radio_normal_freq(freq);
    if (freq >= 117.5) {
print("++++ 41 : ",chan," freq: ",freq);
        var list = props.globals.getNode("fdm/jsbsim/systems/gauges/radio/com1/chann").getChildren("data");
        if (chan != nil and chan > 0 and chan <= 20) {
            list[chan].setDoubleValue("freq",freq);
print("++++ 42 : ",chan," freq: ",freq);
            return chan;
        } else {
            var chan_found = 0;
            var frist_chan_zero = 0;
            for (var i = 1; i < 19; i += 1) {
                var chan_freq = radio_normal_freq(list[i].getNode("freq").getValue());
                if (chan_freq == 0.0 and frist_chan_zero == 0) frist_chan_zero = i;
                if (freq == chan_freq) {
print("++++ 43 : ",i," freq: ",freq);
                    return i;
                };
            };
            if (chan_found == 0 and frist_chan_zero > 0) {
                list[frist_chan_zero].setDoubleValue("freq",freq);
                chan_found = frist_chan_zero;
            };
print("++++ 44 : ",chan_found," freq: ",freq);
            return chan_found;
        };
    };
print("++++ 45 : 0");
    return 0;
    
};


var radio_ptr175 = func() {
    
    if (chan_selector == nil) {
        start_status = 1;
        chan_selector = getprop("fdm/jsbsim/systems/gauges/radio/ptr175/chan-selector");
        
        var list = props.globals.initNode("fdm/jsbsim/systems/gauges/radio/com1/chann");
        list.removeAllChildren();
        list.addChildren("data", 22);
        list = props.globals.getNode("fdm/jsbsim/systems/gauges/radio/com1/chann").getChildren("data");
        for (var i = 1; i < 21; i += 1) {
            list[i].setIntValue("active",0);
            list[i].setDoubleValue("freq",0.0);
            list[i].setValue("description","");
        };
        
        setprop("fdm/jsbsim/systems/gauges/radio/com1/chann/data[20]/freq",getprop("fdm/jsbsim/systems/gauges/radio/ptr175/freq-guard"));
        setprop("fdm/jsbsim/systems/gauges/radio/com1/chann/data[20]/description","Emergency");
        
        setprop("/instrumentation/comm[1]/power-bin",0);
        
        print("radio_ptr175.nas - radio_ptr175 - load module complete");
        start_status = 2;
    };
    
    if (start_status == 2 or prec_frequencies_selected_mhz == nil or prec_frequencies_selected_mhz == 0.0) {
        #// Chan 19 status ad freq, in the start set the chan 19 (M as manual)
        var freq = radio_normal_freq(getprop("instrumentation/comm/frequencies/selected-mhz"));
        prec_frequencies_selected_mhz = radio_set_chan_freq(19,freq);
        setprop("fdm/jsbsim/systems/gauges/radio/ptr175/chan-selector",19);
        start_status = 9;
    } else {
        var freq = radio_normal_freq(getprop("instrumentation/comm/frequencies/selected-mhz"));
        if (prec_frequencies_selected_mhz != freq) {
            var chan = radio_set_chan_freq(nil,freq);
            if (chan_old == nil) chan_old = chan;
            if (chan != nil and chan > 0 and chan != chan_old) {
                chan_old = chan;
print("++++ 1: ",chan," <-> ",chan_old," freq: ",freq," prec_frequencies_selected_mhz: ",prec_frequencies_selected_mhz);
                setprop("fdm/jsbsim/systems/gauges/radio/ptr175/chan-selector",chan);
            } else if (freq != comm_freq_select_mhz_old) {
                #// Is full load freq return to manual insert freq
print("++++ 2: ",chan," <-> ",chan_old," freq: ",freq," prec_frequencies_selected_mhz: ",prec_frequencies_selected_mhz," comm_freq_select_mhz_old; ",comm_freq_select_mhz_old);
                radio_set_chan_freq(19,freq);
                setprop("fdm/jsbsim/systems/gauges/radio/ptr175/chan-selector",19);
            };
            prec_frequencies_selected_mhz = freq;
        };
    };
    
    var operative_start_stop = getprop("fdm/jsbsim/systems/gauges/radio/ptr175/operative-start-stop");
    var operative_heating = getprop("fdm/jsbsim/systems/gauges/radio/ptr175/operative-heating");
    var operative_serviceable = getprop("/instrumentation/comm/serviceable");
    
    radio_status = "no tension";
    if (operative_start_stop > 0) {
        radio_status = "switch on";
        if (operative_heating > 0.0) {
            radio_status = "heating " ~ sprintf("%.0f %%",operative_heating * 100.0);
            if (operative_serviceable > 0) {
                radio_status = "serviceable";
            };
        };
    };
    
    #// Chain the JSBSim PTR175 with instrumentation/comm/frequencies/selected-mhz
    if (comm_freq_select_mhz_old == nil) {
        comm_freq_select_mhz_old = getprop("fdm/jsbsim/systems/gauges/radio/ptr175/comm-freq-select-mhz");
        comm_freq_select_mhz = comm_freq_select_mhz_old;
        comm_freq_select_mhz_change = 1;
    } else {
        var cfs = getprop("fdm/jsbsim/systems/gauges/radio/ptr175/comm-freq-select-mhz");
        if (cfs != comm_freq_select_mhz_old) {
            comm_freq_select_mhz_change = 1;
            setprop("instrumentation/comm/frequencies/selected-mhz",cfs);
print("**** 3 : ",cfs," <-> ",comm_freq_select_mhz_old);
            comm_freq_select_mhz_old = cfs;
            comm_freq_select_mhz = cfs;
        };
    };
    
    setprop("fdm/jsbsim/systems/gauges/radio/ptr175/knob-function-desc",knob_function_desc ~ " | " ~ radio_status);
    
    
};


setlistener("instrumentation/comm/frequencies/selected-mhz", func {
    
    if (comm_freq_select_mhz_change != 1) {
        comm_freq_select_mhz = getprop("instrumentation/comm/frequencies/selected-mhz");
        comm_freq_select_mhz_old = comm_freq_select_mhz;
        setprop("fdm/jsbsim/systems/gauges/radio/ptr175/comm-freq-select-mhz",comm_freq_select_mhz);
        comm_freq_select_mhz_change = 0;
        print("++++ 21 : ",getprop("instrumentation/comm/frequencies/selected-mhz"));
    } else {
        print("++++ 22 : ",getprop("instrumentation/comm/frequencies/selected-mhz"));
    };
    
}, 0, 1);


setlistener("fdm/jsbsim/systems/gauges/radio/ptr175/chan-selector", func {
    
    chan_selector = getprop("fdm/jsbsim/systems/gauges/radio/ptr175/chan-selector");
    print("++++ 11 : ",chan_selector);
    if (chan_selector > 0) {
        setprop("fdm/jsbsim/systems/gauges/radio/ptr175/chan-selector-gui",chan_selector);
    };
    
}, 0, 1);


setlistener("fdm/jsbsim/systems/gauges/radio/ptr175/chan-selector-gui", func {
    
    var chan_selector_gui = getprop("fdm/jsbsim/systems/gauges/radio/ptr175/chan-selector-gui");
    
    if (chan_selector_gui > 0) {
        var list = props.globals.getNode("fdm/jsbsim/systems/gauges/radio/com1/chann").getChildren("data");
        #// Only one check-bos is selected
        for(var i = 1; i <= 20; i += 1) {
            if (chan_selector_gui != i) {
                list[i].getNode("active").setValue(0);
            } else {
                list[i].getNode("active").setValue(1);
                setprop("fdm/jsbsim/systems/gauges/radio/ptr175/chan-selector",chan_selector_gui);
            };
            #//print("*** active i: ",i," ",list[i].getNode("active").getValue()," ",list[i].getNode("freq").getValue());
        };
        #//if (chan_selector_gui != 19 or (chan_selector_gui == 19 and list[19].getNode("active").getValue() >= 1)) {
        if (chan_selector_gui != 19) {
            var chan_selector_gui_freq = list[chan_selector_gui].getNode("freq").getValue();
            comm_freq_select_mhz_change = 2;
            setprop("instrumentation/comm/frequencies/selected-mhz",chan_selector_gui_freq);
print("++++ 31 : ",chan_selector_gui_freq);
        } else {
            var frequencies_selected_mhz = getprop("instrumentation/comm/frequencies/selected-mhz");
            setprop("fdm/jsbsim/systems/gauges/radio/com1/chann/data[19]/freq",frequencies_selected_mhz);
print("++++ 32 : ",frequencies_selected_mhz);
        };
    };
    
    setprop("fdm/jsbsim/systems/gauges/radio/ptr175/chan-selector-gui",0);
    
}, 0, 1);


setlistener("fdm/jsbsim/systems/gauges/radio/ptr175/chan-freq-gui", func {
    
    var chan_freq_gui = getprop("fdm/jsbsim/systems/gauges/radio/ptr175/chan-freq-gui");
    
    if (chan_freq_gui > 0) {
        var list = props.globals.getNode("fdm/jsbsim/systems/gauges/radio/com1/chann").getChildren("data");
        if (list[chan_freq_gui].getNode("active").getValue() == 1) {
            var chan_selector_gui_freq = list[chan_freq_gui].getNode("freq").getValue();
            comm_freq_select_mhz_change = 2;
            setprop("instrumentation/comm/frequencies/selected-mhz",chan_selector_gui_freq);
            setprop("fdm/jsbsim/systems/gauges/radio/ptr175/chan-selector",chan_freq_gui);
        };
    };
    
    setprop("fdm/jsbsim/systems/gauges/radio/ptr175/chan-freq-gui",0);
    
}, 0, 1);


setlistener("fdm/jsbsim/systems/gauges/radio/ptr175/knob-function-set", func {
    
    comm_function_set = getprop("fdm/jsbsim/systems/gauges/radio/ptr175/knob-function-set");
    knob_function_desc = "OFF";
    
    if(comm_function_set == 1) {
        knob_function_desc = "ON - T/R";
    } elsif (comm_function_set == 2) {
        knob_function_desc = "ON - T/R + G";
    } elsif (comm_function_set == 3) {
        knob_function_desc = "ON - ADF";
    } elsif (comm_function_set == 4) {
        knob_function_desc = "ON - DL";
    } elsif (comm_function_set == 5) {
        knob_function_desc = "ON - DL + T";
    } elsif (comm_function_set == 6) {
        knob_function_desc = "ON - T/R On D/L Off";
    }
    
    setprop("fdm/jsbsim/systems/gauges/radio/ptr175/knob-function-desc",knob_function_desc ~ " | " ~ radio_status);
    
    #// Emerg (Guard) chan only rec.
    if (comm_function_set == 2) {
        var com2_freq = getprop("/instrumentation/comm[1]/frequencies/selected-mhz");
        var freq_guard = getprop("fdm/jsbsim/systems/gauges/radio/ptr175/freq-guard");
        if (com2_old_freq_value == nil) {
            com2_old_freq_value = com2_freq;
        } else {
            if (com2_old_freq_value != freq_guard) {
                com2_old_freq_value = com2_freq;
            };
        };
        setprop("/instrumentation/comm[1]/frequencies/selected-mhz",freq_guard);
        setprop("/instrumentation/comm[1]/power-bin",1);
    } else {
        if (com2_old_freq_value != nil) {
            setprop("/instrumentation/comm[1]/frequencies/selected-mhz",com2_old_freq_value);
            setprop("/instrumentation/comm[1]/power-bin",0);
            com2_old_freq_value = nil;
        };
    };
    
}, 0, 1);


setlistener("fdm/jsbsim/systems/gauges/radio/ptr175/freq-guard", func {
    
    var freq_guard = getprop("fdm/jsbsim/systems/gauges/radio/ptr175/freq-guard");
    setprop("fdm/jsbsim/systems/gauges/radio/com1/chann/data[20]/freq",freq_guard);
    setprop("fdm/jsbsim/systems/gauges/radio/ptr175/chan-freq-gui",20);
    
}, 0, 1);


var radio_ptr175_control = func() {
    
    delta_time_delay -= 1;
    
    if (delta_time_delay <= 0) {
        testing_log_active = getprop("sim/G91/testing/log");
        if (testing_log_active == nil) testing_log_active = 0;
        
        radio_ptr175();
        
        delta_time_delay = delta_time;
    };
    radio_ptr175_controlTimer.restart(1);
}


var radio_ptr175_controlTimer = maketimer(1, radio_ptr175_control);
radio_ptr175_controlTimer.singleShot = 1;
radio_ptr175_controlTimer.start();
