# From: http://wiki.flightgear.org/Howto:Dynamic_Liveries_via_Canvas

setprop("sim/G91/liveries/active/name_short","");
setprop("sim/G91/liveries/active/name_long","");
setprop("sim/G91/liveries/active/livery_001","");
setprop("sim/G91/liveries/active/livery_002","");
setprop("sim/G91/liveries/active/dirty_001","");
setprop("sim/G91/liveries/active/dirty_002","");
setprop("sim/G91/liveries/active/PANR1",0);
setprop("sim/G91/liveries/active/diffuse",0.0);
setprop("sim/G91/liveries/active/specular",0.0);
setprop("sim/G91/liveries/active/dirty_set",0);
setprop("sim/G91/liveries/active/normalmap_enabled",0);
setprop("sim/G91/liveries/active/version",0);

var inExecution = 0;
var isMultiPlayer = 0;
var isMultiPlayerPrec = -1;

var multiplayerList = nil;
var multiplayerListDim = 0;

var target_module_id = nil;
var targets_module_id = {};
var targets_path = {};

var resolutionSet = -1;
var resolutionSetPrec = -1;
var resolutionSetChanged = 0;

var id_prec = -1;
var dirty_prec = -1;

var layers_001 = {};
var layers_001_create = 0;
var ca = nil;
var ca_root = nil;
var layers_002 = {};
var layers_002_create = 0;
var cw = nil;
var cw_root = nil;

var dirty_set = 0;
var normalmap_enabled = 0;

var livery_001 = "";
var livery_002 = "";
var dirty_001 = "";
var dirty_002 = "";


var objectsNodes_ca = [
# Fuselage
"A__G91_fuselage_int.weapon.door.001",
"m00_door_01.1",
"m00_door_02",
"m00_door_dx01",
"m00_door_dx03",
"m00_door_sx01",
"m00_door_sx03",
"m00_platelight",
"m00_door_sx03.001",
"m00_door_dx03.001",
"F__door_02",
"F__door_03",
"F__door_02.001",
"F__door_03",
"F__door_03.002",
"F__door_em_canopy01",
"F__door_em_canopy01.002",
"F_door_em_canopyDX.000",
"F_door_em_canopyDX.001",
"F_door_em_canopyDX.002",
"F_door_em_canopyDX.004",
"F_door_em_canopyDX.004a",
"F_door_em_canopyDX.004a.001",
"F_door_em_canopyDX.005",
"F_door_em_canopySX.000",
"F_door_em_canopySX.001",
"F_door_em_canopySX.002",
"F_door_em_canopySX.004",
"F_door_em_canopySX.004a",
"F_door_em_canopySX.005",
"F_handle_armydoorDX",
"F_handle_armydoorSX",
"B00_sx_door_01.001",
"B00_dx_door_01.000",
"B00_Asse_dx_door_bis",
"B00_sx_door_bis.002",
"A__G91_fuselage_int.weapon.door.007",
"A__G91_fuselage_int.weapon.door.008",
"m00_door_01.2",
"m00_door_dx03.002",
"tank_cap1",
"tank_cap",
# tail
"A__G91_fuselage_coda.002",
"A__G91_fuselage_coda.005",
"A__G91_fuselage_coda.006",
"A__G91_door_sx_coda.000",
"A__G91_door_dx_coda.001",
"A__G91_fuselage_coda.007",
"A__G91_fuselage_coda.009",
"A__G91_fuselage_coda.010",
"exit_smoke_001_cover",
"exit_smoke_001",
"exit_smoke",
"fin_small.001",
"fin_small.002",
"fin_small.003",
"fin_small.004",
"fin_small.005",
"fin_small.006",
"fin_small.007",
"fin_small.008",
"fin_small.009",
"fin_small.010",
"D_timone_coda",
"D_timone_coda.001",
"D_timone_coda.002",
"D_timone_coda.003",
"D_aletta_correttrice",
"M_tail_component_01",
"vent_tail",
# Canopy
"A__G91_fuselage_canopy",
"F_canopY_ant",
"F_CANPOPY.005",
# Fuselage A0
"A__G91_fuselage_muso_1.001",
"A__G91_fuselage_muso_1.000",
"A__G91_fuselage_muso_1.008",
"A__G91_fuselage_muso_1.009",
"A_antenna_cover",
"panR1b__G91_fuselage_muso_1.000",
"panR1b__G91_fuselage_muso_1.024",
# Fuselage B0
"A__G91_fuselage_weapon_door_dx.003",
"A__G91_fuselage_weapon_door_sx.003",
"A__G91r3_fuselage_weapon_door_sx.",
"A__G91r3_fuselage_weapon_door_dx",

# Airbrake
"C00_dx_airbrake_door.002",
"C00_sx_airbrake_door.004",

# Landing gear frontal
"PlanLight.front.001",
"gear_door_sx.000",
"gear_door_dx.001"
];

var objectsNodes_cw = [
# Wing
"A_wing_dx.000",
"A_wing_sx.000",
"A_wing_dx.001",
"A_wing_sx.001",
"A_wing_dx.002",
"A_wing_sx.002",
"A_wing_dx.004",
"A_wing_sx.004",
"A_wing_dx.005",
"A_wing_sx.005",
"A_wing_dx.006",
"A00_wing_dx_part.001",
"A00_wing_dx_part.002",
"A00_wing_dx_part.003",
"A_flap_dx",
"A_flap_sx",
"A_alettone_sx.001",
"A_alettone_dx.002",
"A_alettone_sx",
"A_alettone_dx",
"A_wing_border_sx",
"A_wing_border_dx.001",
"A_door_wing_dx.001",
"A_door_wing_dx.004",
"A_door_wing_dx.005",
"A_door_wing_sx.000",
"A_door_wing_sx.002",
"A_door_wing_sx.003",
"B00_dx_door_02.002",
"B00_dx_door_02",
"A00_pitot_dx",
"A00_pitot_dx.001",
# Tail
"D_wing_sx_.001",
"D_wing_sx.000",
"D_wing_dx_.000",
"D_wing_dx.007",
"D_equilibratore_dx",
"D_equilibratore_sx.002",
# Hard points
"hp_dx_int_01_external",
"hp_dx_int_PAN_external",
"hp_sx_int_01_external",
"hp_sx_int_PAN_external",
# Stores
"tank_260lb_sub_01",
"tank_260lb_sup_01",
"tank_260lb_tail_01",
"PAN_tank_sx.004",
"PAN_tank_sx_003",
# Tank 900lb
"tank_cover_top",
"tank_cover_downa",
"orizontal-pin (Meshed)",
"vertical-pin-dx (Meshed)",
"vertical-pin-sx (Meshed)",
# Fuselage extra
"A__G91r3_fuselage_weapon.door"
];


var get_resolution = func(aResolutionSet) {
    var resolution = 512;
    if (aResolutionSet == 1) {
        resolution = 512; }
        elsif (aResolutionSet == 2) {
            resolution = 1024; }
            elsif (aResolutionSet == 3) {
                resolution = 2048; }
                elsif (aResolutionSet == 4) {
                    resolution = 4096; }
                    else {
                        print("set_livery.nas changeResolution resolutionSet error but change in 1 (",aResolutionSet,")");
                        aResolutionSet = 2;
                        resolution = 1024;
                        setprop("sim/G91/liveries/active/resolution-set",aResolutionSet);
                        setprop("sim/G91/liveries/active/resolution-set-pixel",resolution);
                    }
                    return resolution;
};


var setCanvas = func(resolutionSet) {
    
    # see: http://wiki.flightgear.org/Howto:Creating_fullscreen_Canvas_applications
    # see: http://wiki.flightgear.org/Canvas_Nasal_API
    
    if (resolutionSet == 0) return;
    
    var resolution = get_resolution(resolutionSet);
 
    print("set_livery.nas setCanvas: ca_size = ",resolution," cw_size = ",resolution, " module id: ",target_module_id);
    
    if (ca == nil) {
        ca = canvas.new({"name": "Fuselage",
            "size": [resolution,resolution],
            "view": [resolution,resolution],
            "mipmapping": 0});
        
        cw = canvas.new({"name": "Wing",
            "size": [resolution,resolution],
            "view": [resolution,resolution],
            "mipmapping": 0});
    }
    
    if (target_module_id == nil) {
        print("set_livery.nas setCanvas, single player");
        foreach(var node; objectsNodes_ca) { ca.addPlacement({"node": node}) };
        foreach(var node; objectsNodes_cw) { cw.addPlacement({"node": node}) };
    } else {
        print("set_livery.nas setCanvas, multi player with module-id: ",target_module_id);
        foreach(var node; objectsNodes_ca) { ca.addPlacement({"module-id": target_module_id, type: "scenery-object","node": node}) };
        foreach(var node; objectsNodes_cw) { cw.addPlacement({"module-id": target_module_id, type: "scenery-object","node": node}) };
    }
    
    ca_root = ca.createGroup();
    cw_root = cw.createGroup();
        
};


var setLivery = func(resolutionSet) {
    
    inExecution = 1;

    if (size(dirty_001) == 0 or size(dirty_002) == 0) {
        setprop("sim/G91/liveries/active/dirtyMsg","No dirty file");
        if (dirty_set == 1) {
            setprop("/G91/liveries/active/dirty-set",0);
            dirty_set = 0;
        }
    }
    
    var resolution = 0;
    var id = 0;
    
    if (resolutionSet > 0) {
        resolution = get_resolution(resolutionSet);
    }
  
    if (ca_root != nil) {
        id = 0;
        foreach(var image; [livery_001, dirty_001]) {
            id += 1;
            var insertLivery = 0;
            print("set_livery.nas setLivery ca_root image: ",image," (",size(image),") resolution: ",resolution);
            # Insert the layer
            if (size(image) > 0 and resolutionSet > 0) {
                if (id == 1 and !contains(layers_001, image)) insertLivery = 1;
                if (id == 2 and dirty_set == 1 and !contains(layers_001, image)) insertLivery = 1;
                if (insertLivery == 1) {
                    layers_001[image] = ca_root.createChild("image")
                        .setFile(image)
                        .setSize(resolution,resolution);
                } else {
                    print("set_livery.nas setLivery ca_root not inserted id: ",id);
                }
                if (id == 2 and contains(layers_001, image)) {
                    if (dirty_set == 1) {
                        print("set_livery.nas dirty show: ",dirty_001);
                        layers_001[image].show();
                    } else {
                        print("set_livery.nas dirty hide: ",dirty_001);
                        layers_001[image].hide();
                    }
                }
            }
        }
    }
    
    if (cw_root != nil) {
        id = 0;
        foreach(var image; [livery_002, dirty_002]) {
            id += 1;
            var insertLivery = 0;
            print("set_livery.nas setLivery cw_root image: ",image," (",size(image),") resolution: ",resolution);
            # Insert the layer
            if (size(image) > 0 and resolutionSet > 0) {
                if (id == 1 and !contains(layers_002, image)) insertLivery = 1;
                if (id == 2 and dirty_set == 1 and !contains(layers_002, image)) insertLivery = 1;
                if (insertLivery == 1) {
                    layers_002[image] = cw_root.createChild("image")
                        .setFile(image)
                        .setSize(resolution,resolution);
                } else {
                    print("set_livery.nas setLivery cw_root not inserted id: ",id);
                }
                if (id == 2 and contains(layers_002, image)) {
                    if (dirty_set == 1) {
                        print("set_livery.nas dirty show: ",dirty_002);
                        layers_002[image].show();
                    } else {
                        print("set_livery.nas dirty hide: ",dirty_002);
                        layers_002[image].hide();
                    }
                }
            }
        }
    }
    
    inExecution = 0;
};


var getActiveData = func(aId_multiplayer) {
    
    var resolution = 0;
    var id_multiplayer = nil;
    var idSelect = 0;
    var PANR1 = 0;
    var version = 0;
    var name_short = "";
    var name_long = "";
    var diffuse = 0.0;
    var specular = 0.0;
    
    if (aId_multiplayer == nil) {
        id_multiplayer = nil;
        isMultiPlayer = 0;
        setprop("sim/G91/liveries/active/isMultiPlayer",0);
        if (resolutionSet < 0) resolutionSet = getprop("sim/G91/liveries/active/resolution-set");
        print("set_livery.nas getActiveData isMultiPlayer set to 0");
    } else {
        id_multiplayer = aId_multiplayer;
        isMultiPlayer = 1;
        resolutionSet = 2;
        setprop("sim/G91/liveries/active/isMultiPlayer",1);
        print("set_livery.nas getActiveData isMultiPlayer set to 1  id_MultiPlayer: ",id_multiplayer);
    }
    
    print("set_livery.nas getActiveData resolution id: ",resolutionSet);
    setprop("sim/G91/liveries/active/setResolution",resolutionSet);
    
    if (isMultiPlayer == 0) {
        
        #// Single player mode
        
        print("set_livery.nas getActiveData, read data from G91_Params.xml");
        
        idSelect = getprop("sim/G91/liveries/active/id");
        if (idSelect == nil) {
            print("set_livery.nas getActiveData, error read ID, set ID to 1");
            setprop("sim/G91/liveries/active/id",1);
            idSelect = 1;
        } else {
            print("set_livery.nas getActiveData, idSelect: ",idSelect);
        }
        
        resolutionSet = getprop("sim/G91/liveries/active/setResolution");
        if (resolutionSet == nil) {
            print("set_livery.nas getActiveData, error read resolutionSet");
            resolutionSet = 0;
        }
        
        if (resolutionSetPrec > 0 and resolutionSetPrec != resolutionSet) {
            print("set_livery.nas getActiveData, resolutionSet: change resolution is only for one time");
            resolutionSet = resolutionSetPrec;
            setprop("sim/G91/liveries/active/setResolution",resolutionSet);
            return;
        }
        
        if (idSelect == 0 or resolutionSet == 0) {
            print("set_livery.nas getActiveData, error file liveries/active not found");
            return;
        } else {
            print("set_livery.nas getActiveData, set resolution: ", resolutionSet);
        }
        
        var liverys = props.globals.getNode("sim/G91/liveries").getChildren("livery");
        
        var id = -1;
        forindex(i; liverys) {
            if (liverys[i].getNode("id").getValue() == idSelect) {
                print("set_livery.nas getActiveData, id select: ", idSelect, "(",i,")");
                id = i;
                break;
            }
        }
        
        if (id == -1) {
            id = 0;
            print("set_livery.nas getActiveData error: id not found, set default id = 0");
        } else {
            print("set_livery.nas getActiveData id: ",id);
        }
        
        version = liverys[id].getNode("version").getValue();
        livery_001 = liverys[id].getNode("livery_001").getValue();
        livery_002 = liverys[id].getNode("livery_002").getValue();
        dirty_001 = liverys[id].getNode("dirty_001").getValue();
        dirty_002 = liverys[id].getNode("dirty_002").getValue();
        name_short = liverys[id].getNode("name_short").getValue();
        name_long = liverys[id].getNode("name_long").getValue();
        PANR1 = liverys[id].getNode("PANR1").getValue();
        diffuse = liverys[id].getNode("diffuse").getValue();
        specular = liverys[id].getNode("specular").getValue();
        dirty_set = liverys[id].getNode("dirty_set").getValue();
        normalmap_enabled = liverys[id].getNode("normalmap_enabled").getValue();
        
        setprop("sim/G91/liveries/active/id",idSelect);
        setprop("sim/G91/liveries/active/version",version);
        setprop("sim/G91/liveries/active/name_short",name_short);
        setprop("sim/G91/liveries/active/name_long",name_long);
        setprop("sim/G91/liveries/active/livery_001",livery_001);
        setprop("sim/G91/liveries/active/livery_002",livery_002);
        setprop("sim/G91/liveries/active/dirty_001",dirty_001);
        setprop("sim/G91/liveries/active/dirty_002",dirty_002);
        setprop("sim/G91/liveries/active/PANR1",PANR1);
        setprop("sim/G91/liveries/active/diffuse",diffuse);
        setprop("sim/G91/liveries/active/specular",specular);
        setprop("sim/G91/liveries/active/dirty_set",dirty_set);
        setprop("sim/G91/liveries/active/normalmap_enabled",normalmap_enabled);
        
    } else {
        
        #// Is in multiplayer mode
        
        print("set_livery.nas getActiveData, read data from multiplayer id: ",id_multiplayer);
        
        if (size(targets_module_id) > 0) {
            idSelect = targets_module_id[id_multiplayer]["id"];
            PANR1 = targets_module_id[id_multiplayer]["PANR1"];
            version = targets_module_id[id_multiplayer]["version"];
            name_short = "Multiplayer";
            name_long = "Multiplayer";
            livery_001 = targets_module_id[id_multiplayer]["livery_001"];
            livery_002 = targets_module_id[id_multiplayer]["livery_002"];
            dirty_001 = targets_module_id[id_multiplayer]["dirty_001"];
            dirty_002 = targets_module_id[id_multiplayer]["dirty_002"];
            diffuse = targets_module_id[id_multiplayer]["diffuse"];
            specular = targets_module_id[id_multiplayer]["specular"];
            dirty_set = targets_module_id[id_multiplayer]["dirty_set"];
            normalmap_enabled = targets_module_id[id_multiplayer]["normalmap-enabled"];
        }

    }

    print("set_livery.nas getActiveData setLivery  id: ",idSelect);
    print("set_livery.nas getActiveData setLivery  version: ",version);
    print("set_livery.nas getActiveData setLivery  name_short: ",name_short);
    print("set_livery.nas getActiveData setLivery  name_long: ",name_long);
    print("set_livery.nas getActiveData setLivery  livery_001: ",livery_001);
    print("set_livery.nas getActiveData setLivery  livery_002: ",livery_002);
    print("set_livery.nas getActiveData setLivery  dirty_001: ",dirty_001);
    print("set_livery.nas getActiveData setLivery  dirty_002: ",dirty_002);
    print("set_livery.nas getActiveData setLivery  PANR1: ",PANR1);
    print("set_livery.nas getActiveData setLivery  diffuse: ",diffuse);
    print("set_livery.nas getActiveData setLivery  specular: ",specular);
    print("set_livery.nas getActiveData setLivery  dirty_set: ",dirty_set);
    print("set_livery.nas getActiveData setLivery  normalmap_enabled: ",normalmap_enabled);
    
    resolutionSetPrec = resolutionSet;
    
    id_prec = idSelect;
    dirty_prec = dirty_set;
    
    setCanvas(resolutionSet);
    setLivery(resolutionSet);
    
};


setlistener("sim/G91/liveries/active/id", func() {
    if (isMultiPlayer == 0) {
        var id = getprop("sim/G91/liveries/active/id");
        if (id == 0) {
            print("set_livery.nas setlistener error ID: ",id," MP: 0 the ID is forced to 1");
            setprop("sim/G91/liveries/active/id",1);
            id = 1;
        }
        print("set_livery.nas setlistener ID: ",id," no MP");
        if (id != nil and id != 0 and id_prec != id) {
            if(inExecution == 0) {
                getActiveData(nil);
            }
        }
    }
}, 1, 1);


setlistener("sim/G91/liveries/active/dirty-set", func() {
    if (isMultiPlayer == 0) {
        if (inExecution == 0) {
            dirty_set = getprop("sim/G91/liveries/active/dirty-set");
            print("set_livery.nas setlistener dirty-set: ",dirty_set);
            if (dirty_set == 0) {
                setprop("sim/G91/liveries/active/dirty-set","0");
                setprop("sim/G91/liveries/active/dirty-Msg","Dirty inactive");
                print("set_livery.nas setLivery, Dirty inactive");
            } else {
                setprop("sim/G91/liveries/active/dirty-set","1");
                setprop("sim/G91/liveries/active/dirty-Msg","Dirty active");
                print("set_livery.nas setLivery, Dirty active");
            }
            setLivery(resolutionSet);
        }
    }
}, 1, 1);


setlistener("sim/G91/liveries/active/normalmap-enabled", func() {
    if (isMultiPlayer == 0) {
        if (inExecution == 0) {
            normalmap_enabled = props.globals.getNode("sim/G91/liveries/active/normalmap-enabled",1).getValue();
            if (normalmap_enabled == 0) {
                setprop("sim/G91/liveries/active/normalmap-enabled-Msg","No normal map");
                print("set_livery.nas setLivery, normalmap-enabled-Msg: No normal map");
            } else {
                setprop("sim/G91/liveries/active/normalmap-enabled-Msg","Yes Normal map");
                print("set_livery.nas setLivery, normalmap-enabled-Msg: Yes Normal map");
            }
            print("set_livery.nas setlistener normalmap-enabled: ",normalmap_enabled);
        }
    }
}, 1, 1);


var livery_multiplayer = maketimer(1, func() {
    target_module_id = getprop("sim/G91/liveries/active/set-target-module-id");
    if ((target_module_id != nil and isint(target_module_id)) or (target_module_id != nil and target_module_id == -1)) {
        var pathMultiplayer = nil;
        multiplayerList = props.globals.getNode("/ai/models/").getChildren("multiplayer");
        if (multiplayerList != nil) {
            var multiplayerListDim = size(multiplayerList);
            if (multiplayerListDim > 0) {
                var insert_targets_module_id = 0;
                if (target_module_id == -1) {
                    #// Is and update target_module_id
                    foreach(var tmId; keys(targets_module_id)) {
                        var id = targets_module_id[tmId]["id"];
                        var idNew = multiplayerList[tmId].getNode("sim/G91/liveries/active/id").getValue();
                        if (id != idNew) {
                            print("set_livery.nas livery_multiplayer timer update id: ",idNew, " is different old id: ",id, " list dim: ",multiplayerListDim);
                            target_module_id = tmId;
                            insert_targets_module_id = 1;
                        }    
                    }
                } elsif (target_module_id >= 0) {
                    pathMultiplayer = getprop("sim/G91/liveries/active/set-target-path");
                    insert_targets_module_id = 1;
                    print("set_livery.nas livery_multiplayer timer insert new target_module_id: ",target_module_id, " list dim: ",multiplayerListDim);
                }
                if (insert_targets_module_id == 1 and target_module_id >= 0) {
                    print("set_livery.nas livery_multiplayer timer insert data in targets_module_id with target_module_id: ",target_module_id);
                    targets_module_id[target_module_id] = {};
                    targets_module_id[target_module_id]["target_module_id"] = target_module_id;
                    targets_module_id[target_module_id]["id"] = multiplayerList[target_module_id].getNode("sim/G91/liveries/active/id").getValue();
                    targets_module_id[target_module_id]["PANR1"] = multiplayerList[target_module_id].getNode("sim/G91/liveries/active/PANR1").getValue();
                    targets_module_id[target_module_id]["version"] = multiplayerList[target_module_id].getNode("sim/G91/liveries/active/version").getValue();
                    targets_module_id[target_module_id]["livery_001"] = multiplayerList[target_module_id].getNode("sim/G91/liveries/active/livery_001").getValue();
                    targets_module_id[target_module_id]["livery_002"] = multiplayerList[target_module_id].getNode("sim/G91/liveries/active/livery_002").getValue();
                    targets_module_id[target_module_id]["dirty_001"] = multiplayerList[target_module_id].getNode("sim/G91/liveries/active/dirty_001").getValue();
                    targets_module_id[target_module_id]["dirty_002"] = multiplayerList[target_module_id].getNode("sim/G91/liveries/active/dirty_002").getValue();
                    targets_module_id[target_module_id]["diffuse"] = multiplayerList[target_module_id].getNode("sim/G91/liveries/active/diffuse").getValue();
                    targets_module_id[target_module_id]["specular"] = multiplayerList[target_module_id].getNode("sim/G91/liveries/active/specular").getValue();
                    targets_module_id[target_module_id]["dirty_set"] = multiplayerList[target_module_id].getNode("sim/G91/liveries/active/dirty_set").getValue();
                    targets_module_id[target_module_id]["normalmap-enabled"] = multiplayerList[target_module_id].getNode("sim/G91/liveries/active/normalmap-enabled").getValue();
                    getActiveData(target_module_id);
                }
            }
        }
        setprop("sim/G91/liveries/active/set-target-module-id",-1);
    }
    var del_target_module_id = getprop("sim/G91/liveries/active/del-target-module-id");
    if (del_target_module_id != nil and isint(del_target_module_id) and del_target_module_id >= 0) {
        var multiplayerListDim = size(multiplayerList);
        if (multiplayerListDim > 0) {
            target_module_id = nil;
            delete(targets_module_id, del_target_module_id);
            print("set_livery.nas livery_multiplayer timer delete target_module_id: ",del_target_module_id," targets_module_id dim: ",size(targets_module_id)," list dim: ",multiplayerListDim);
        }
        setprop("sim/G91/liveries/active/del-target-module-id",-1);
    }
});
livery_multiplayer.start();
