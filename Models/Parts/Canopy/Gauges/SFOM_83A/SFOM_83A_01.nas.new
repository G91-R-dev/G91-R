var prop = props.globals.initNode("sim/G91/gauge/SFOM_83A/button", 60, "DOUBLE");
var prop = props.globals.initNode("sim/G91/gauge/SFOM_83A/inclination", 0, "DOUBLE");
var prop = props.globals.initNode("sim/G91/gauge/SFOM_83A/isLightActive", 0, "DOUBLE");
var prop = props.globals.initNode("sim/G91/gauge/SFOM_83A/collimatorLight", 0, "DOUBLE");
var prop = props.globals.initNode("sim/G91/gauge/SFOM_83A/whiteLight", 0, "DOUBLE");
var prop = props.globals.initNode("sim/G91/gauge/SFOM_83A/collimator_red", 0, "DOUBLE");
var prop = props.globals.initNode("sim/G91/gauge/SFOM_83A/collimator_green", 0, "DOUBLE");
var prop = props.globals.initNode("sim/G91/gauge/SFOM_83A/collimator_blue", 0, "DOUBLE");
var prop = props.globals.initNode("sim/G91/gauge/SFOM_83A/knob_intensity", 0, "DOUBLE");

var pow2 = func(x) { return x * x; };
var vec_length = func(x, y) { return math.sqrt(pow2(x) + pow2(y)); };
var round0 = func(x) { return math.abs(x) > 0.01 ? x : 0; };
var clamp = func(x, min, max) { return x < min ? min : (x > max ? max : x); }

var HUD = {
  canvas_settings: {
    "name": "HUD",
    "size": [512,512], 
    "view": [1024,1024],
    "mipmapping": 1
  },
  new: func(placement)
  {
    var m = {
      parents: [HUD],
      canvas: canvas.new(HUD.canvas_settings)
    };

    m.canvas.addPlacement(placement);
    m.canvas.setColorBackground(0.36, 1, 0.3, 0.02);
    
    m.root = m.canvas.createGroup()
        .setScale(1, 1/math.cos(25 * math.pi/180))
        .setTranslation(240, 180)
        .setDouble("character-size", 18)
        .setDouble("character-aspect-ration", 0.5)
        .set("stroke", "rgba(255,255,255,0.9)");

    var path = "Aircraft/G91-R1B_HD/Models/Parts/Canopy/Gauges/SFOM_83A/SFOM_83A_01_Cross.png";
    var child = m.root.createChild("image")
        .setFile(path)
        .setTranslation(-256,0)
        .setColor(1,1,1,0.35) 
        .setSize(512,512);
                       
    m.horizon_group = m.root.createChild("group");
    m.horizon_group.createChild("path")
                .moveTo(-500, 0)
                .horizTo(500)
                .setStrokeLineWidth(2.5);
    m.horizon_group.createChild("path", "x-axis")
        .moveTo(-500, 0)
        .horizTo(400)
        .setColor(1,1,1)
        .setStrokeLineWidth(5);

    m.input = {
      SFOM_83A_Inclination: "sim/G91/gauge/SFOM_83A/inclination",
      SFOM_83A_isLightActive: "sim/G91/gauge/SFOM_83A/isLightActive",
      SFOM_83A_knob_intensity: "sim/G91/gauge/SFOM_83A/knob_intensity"
      };
    
    foreach(var name; keys(m.input))
      m.input[name] = props.globals.getNode(m.input[name], 1);
    
    return m;
  },
  update: func()
  {
    settimer(func me.update(), 0);
  }
};

var init = setlistener("/sim/signals/fdm-initialized", func() {
  removelistener(init); # only call once
  var hud_pilot = HUD.new({"node": "Collimator_glass_TargetDOWN"});
  hud_pilot.update();
});

